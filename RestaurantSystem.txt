public class RestaurantSystem 
{

	public static void main(String[] args) 
	{
		Restaurant r=new Restaurant("KFC");
		System.out.println("Welcome to "+r.getName()+" Restaurant!!! ");
		
		Waiter w=new Waiter(r);
		w.acceptOrder("Fried Chicken");
		w.start();
		Chef c=new Chef(r);
		c.start();
		
	}

} 

class Restaurant 
{
	private String name;
	private String order;
	boolean isOrderReady=false;//initial order status
	
	public Restaurant(String name)
	{
		this.name=name;
	}
	public synchronized void placeOrder(String order)
	{
		this.order=order;
		System.out.println("Waiter: Placed order for "+this.order);
		notify();
		while(!isOrderReady)//infinite loop(isOrderReady=false) chef will notify then the isOrderReady=true(it will become finite loop and while loop will end)
		{
			try
			{
				wait();
			}
			catch(InterruptedException e)
			{
				 Thread.currentThread().interrupt();
			}
		}
		System.out.println("Waiter: Serving the "+this.order);
		
	}
	public synchronized void prepareOrder()
	{
//		while(this.order== null);
//		{
//			try
//			{
//				wait();
//			}
//			catch(InterruptedException e)
//			{
//				e.printStackTrace();
//			}		
//		}
		System.out.println("Chef: Preparing "+this.order);
		
		try
		{
			Thread.sleep(5000);
		}
		catch(InterruptedException e)
		{
			e.printStackTrace();
		}
		System.out.println("Chef: "+this.order+" is ready!");
		isOrderReady=true;
		notify();
	}
	public String getName() 
	{
		return name;
	}	

}

 class Waiter extends Thread
{
	private Restaurant restaurant;
	private String orderName;
	public Waiter(Restaurant restaurant) 
	{
		super();
		this.restaurant =restaurant; 
	}
	
	public void acceptOrder(String orderName)
	{
		this.orderName=orderName;
	}
	@Override
	public void run()
	{
		restaurant.placeOrder(this.orderName);
	}
	

}

 class Chef extends Thread
{
	private Restaurant restaurant;
	
	public Chef(Restaurant restaurant)
	{
		this.restaurant=restaurant;
	}
	@Override
	public void run()
	{
		restaurant.prepareOrder();
	}

}

